% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RLearner.R
\name{RLearner}
\alias{RLearner}
\alias{RLearnerClassif}
\alias{RLearnerCluster}
\alias{RLearnerMultilabel}
\alias{RLearnerRegr}
\alias{RLearnerSurv}
\alias{makeRLearner}
\alias{makeRLearnerClassif}
\alias{makeRLearnerCluster}
\alias{makeRLearnerMultilabel}
\alias{makeRLearnerRegr}
\alias{makeRLearnerSurv}
\title{Internal construction / wrapping of learner object.}
\usage{
makeRLearner()

makeRLearnerClassif(cl, package, par.set, par.vals = list(),
  properties = character(0L), name = cl, short.name = cl, note = "",
  class.weights.param = NULL)

makeRLearnerMultilabel(cl, package, par.set, par.vals = list(),
  properties = character(0L), name = cl, short.name = cl, note = "")

makeRLearnerRegr(cl, package, par.set, par.vals = list(),
  properties = character(0L), name = cl, short.name = cl, note = "")

makeRLearnerSurv(cl, package, par.set, par.vals = list(),
  properties = character(0L), name = cl, short.name = cl, note = "")

makeRLearnerCluster(cl, package, par.set, par.vals = list(),
  properties = character(0L), name = cl, short.name = cl, note = "")
}
\arguments{
\item{cl}{[\code{character(1)}] \cr
Class name for learner to create.
By convention, all classification learners start with \dQuote{classif.},
all regression learners with \dQuote{regr.}, all cluster learners with \dQuote{cluster.}
and all survival learners start with \dQuote{surv.}.}

\item{package}{[\code{character}]\cr
Package(s) to load for the implementation of the learner.}

\item{par.set}{[\code{\link[ParamHelpers]{ParamSet}}] \cr
Parameter set of (hyper)parameters and their constraints.
Dependent parameters with a \code{requires} field must use \code{quote} and not
\code{expression} to define it.}

\item{par.vals}{[\code{list}] \cr
Always set hyperparameters to these values when the object is constructed.
Useful when default values are missing in the underlying function.
The values can later be overwritten when the user sets hyperparameters.
Default is empty list.}

\item{properties}{[\code{character(1)}]\cr
Set of learner properties. Some standard property names include:
\describe{
  \item{numerics}{Can numeric features be handled?}
  \item{factors}{Can factor features be handled?}
  \item{missings}{Can missing features be handled?}
  \item{oneclas,twoclass,multiclass}{Can one-class, two-class or multi-class classification problems be handled?}
  \item{prob}{Can probabilites be predicted?}
  \item{se}{Can standard errors be predicted?}
  \item{class.weights}{Can class weights be handled?}
}
Default is \code{character(0)}.}

\item{name}{[\code{character(1)}]
Meaningful name for learner.
Default is \code{id}.}

\item{short.name}{[\code{character(1)}]
Short name for learner.
Should only be a few characters so it can be used in plots and tables.
Default is \code{id}.}

\item{note}{[\code{character(1)}]
Additional notes regarding the learner and its integration in mlr.
Default is \dQuote{}.}

\item{class.weights.param}{[\code{character(1)}] \cr
Name of the parameter, which can be used for providing class weights.}
}
\value{
[\code{\link{RLearnerClassif}}, \code{\link{RLearnerCluster}}, \code{\link{RLearnerMultilabel}} \code{\link{RLearnerRegr}} or \code{\link{RLearnerSurv}}].
}
\description{
Wraps an already implemented learning method from R to make it accessible to mlr.
Call this method in your constructor. You have to pass an id (name), the required
package(s), a description object for all changeable parameters (you dont have to do this for the
learner to work, but it is strongly recommended), and use property tags to define features of the learner.
}

